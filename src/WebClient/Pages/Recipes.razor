@page "/recipes"
@using System.Collections.Specialized
@using System.Net.Http.Json
@using RecipeManager.ApplicationCore.Models
@using RecipeManager.ApplicationCore.Resources
@using WebClient.Models
@inject HttpClient Http
@inject ServerConfig ServerConfig

<h1>Recipes</h1>


Search recipes by the ingredients they contain.

<p>@StatusMessage</p>

<MainSearch OnSearch="@OnSearch" IsEnabled="@(!IsSearching)" />

@if (Results != null)
{
    foreach (var recipe in Results.Value)
    {
        <MatCard Style="margin: 8px; padding: 8px;" Stroke="true">
            <h1>@recipe.Title</h1>
            <MatTable Items="@recipe.Ingredients">
                <MatTableHeader>
                    <th>Name</th>
                    <th>Quantity</th>
                    <th>Units</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Name</td>
                    <td>@context.Quantity</td>
                    <td>@context.Units</td>
                </MatTableRow>
            </MatTable>
        </MatCard>
    }
}

@code
{
    bool IsSearching { get; set; }

    Collection<RecipeResource> Results { get; set; }

    private string StatusMessage { get; set; } = "Status Message";

    private void OnSearch(string searchText)
    {
        LoadDataAsync(searchText).ConfigureAwait(false);
    }

    private async Task LoadDataAsync(string searchText)
    {
        var queryParameters = new NameValueCollection();
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            queryParameters["search"] = $"ingredients co {searchText}";
        }

        var uri = ServerConfig.UrlTo("recipes", queryParameters);

        StatusMessage = $"Uri: {uri}";
        Results = null;
        IsSearching = true;
        StateHasChanged();
        try
        {
            Results = await Http.GetFromJsonAsync<PagedCollection<RecipeResource>>(uri);
        }
        catch (Exception ex)
        {
            StatusMessage += Environment.NewLine + ex.ToString();
        }
        
        IsSearching = false;
        StateHasChanged();
    }
}
