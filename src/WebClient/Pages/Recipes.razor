@page "/recipes"
@using System.Web
@using RecipeManager.ApplicationCore.Resources
@inject HttpClient Http

<h1>Recipes</h1>


Search recipes by the ingredients they contain.

<p>@StatusMessage</p>

<MainSearch OnSearch="@OnSearch" />

@if (Results != null)
{
    foreach (var recipe in Results.Value)
    {
        <MatCard Style="margin: 8px; padding: 8px;" Stroke="true">
            <h1>@recipe.Title</h1>
            <MatTable Items="@recipe.Ingredients">
                <MatTableHeader>
                    <th>Name</th>
                    <th>Quantity</th>
                    <th>Units</th>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Name</td>
                    <td>@context.Quantity</td>
                    <td>@context.Units</td>
                </MatTableRow>
            </MatTable>
        </MatCard>
    }
}

@code
{

Collection<RecipeResource> Results { get; set; }

private string StatusMessage { get; set; } = "Status Message";

private void OnSearch(string searchText)
{
    this.LoadDataAsync(searchText).ConfigureAwait(false);
}

private async Task LoadDataAsync(string searchText)
{
    #if DEBUG
    var builder = new UriBuilder("https://localhost/recipes");
    builder.Port = 44364;
    #else
    var builder = new UriBuilder("https://recipemanager.azurewebsites.net/recipes");
    #endif

    ////this.StatusMessage = $"SearchText: {searchText}";
    var query = HttpUtility.ParseQueryString(builder.Query);
    if (!string.IsNullOrWhiteSpace(searchText))
    {
        query["search"] = $"ingredients co {searchText}";
    }

    builder.Query = query.ToString();
    this.StatusMessage = $"Uri: {builder}";
    this.Results = null;
    this.StateHasChanged();
    this.Results = await Http.GetJsonAsync<PagedCollection<RecipeResource>>(builder.ToString());
    this.StateHasChanged();
}
}
