# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
- group: GitHubPATGroup
- name: buildConfiguration
  value: 'Release'

jobs:
- job: WebAPI
  pool:
    vmImage: 'ubuntu-latest'
  steps:

  - task: UseDotNet@2
    displayName: Use .NET Core 3.1 SDK
    inputs:
      packageType: 'sdk'
      version: '3.1.201'
    
  # Important: if WebClient is built, the Azure deployment might fail (give 404 errors)
  - task: DotNetCoreCLI@2
    displayName: DotNet Build Backend
    inputs:
      command: build
      arguments: '--configuration $(buildConfiguration)'
      projects: |
        src/ApplicationCore/*.csproj
        src/Infrastructure/*.csproj
        src/WebAPI/*.csproj
        tests/**/*.csproj

  - script: docker volume create --name=recipemanager-dbdata
    displayName: Create Docker DB Volume

  - task: DockerCompose@0
    displayName: Start Development PostgreSQL Database
    inputs:
      containerregistrytype: 'Azure Container Registry'
      dockerComposeFile: '**/docker-compose.yml'
      action: 'Run a Docker Compose command'
      dockerComposeCommand: 'up -d'
      
  - task: DotNetCoreCLI@2
    displayName: Run Backend Unit Tests
    inputs:
      command: test
      projects: 'tests/*UnitTests/*.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Run Backend Integration Tests
    inputs:
      command: test
      projects: 'tests/*IntegrationTests/*.csproj'
      arguments: '--configuration $(buildConfiguration)'
    
  - task: DotNetCoreCLI@2
    displayName: Run Backend Functional Tests
    inputs:
      command: test
      projects: 'tests/*FunctionalTests/*.csproj'
      arguments: '--configuration $(buildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: Publish Zipped Backend
    inputs:
      command: publish
      publishWebProjects: False
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      zipAfterPublish: True
      projects: |
        src/WebAPI/*.csproj

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Backend Artifact'
    inputs:
      artifactName: 'WebAPI'

  - task: AzureRmWebAppDeployment@4
    displayName: 'Publish To Azure Apps'
    inputs:
      azureSubscription: 'AzureResources'
      WebAppName: 'RecipeManager'
      UseWebDeploy: True
      DeploymentType: webDeploy
      Package: $(System.ArtifactsDirectory)/**/*.zip
      ResourceGroupName: RecipeManagerResourceGroup
      
- job: WebClient
  pool:
    # WebCompiler (for SASS files) only works on Windows for now
    vmImage: 'windows-latest'
  steps:
  
  - task: UseDotNet@2
    displayName: Use .NET Core 3.1 SDK
    inputs:
      packageType: 'sdk'
      version: '3.1.201'

  - task: DotNetCoreCLI@2
    displayName: DotNet Build Frontend
    inputs:
      command: build
      arguments: '--configuration $(buildConfiguration)'
      projects: |
        src/WebClient/*.csproj

  # TODO: Run frontend tests

  - task: DotNetCoreCLI@2
    displayName: Publish App
    inputs:
      command: publish
      # Important: If you zip the publish, the GitHub Pages script will need to unzip it first
      zipAfterPublish: false
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      projects: |
        src/WebClient/*.csproj

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/WebClient
      artifactName: 'WebClient'

  - script: |
      git config --global user.name "%NAME%"
      git config --global user.email "%EMAIL%"
      cd $(Build.ArtifactStagingDirectory)/WebClient/wwwroot
      git init
      git checkout -b gh-pages
      echo * binary > .gitattributes
      git add -A
      git commit -m "Create build $(Build.BuildId)"
      git push -f https://%PAT%@github.com/fernandreu/recipe-manager.git gh-pages
    displayName: 'Publish to GitHub Pages'
    env:
      PAT: $(GitHubPAT)
      NAME: $(GitHubName)
      EMAIL: $(GitHubEmail)
